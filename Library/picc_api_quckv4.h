


//=================================================
//			   RF card functions
//uchar PiccOpen(void);
//uchar PiccSetup (uchar mode, PICC_PARA *picc_para);	// mich_temp: protype different
//uchar PiccDetect(uchar Mode,uchar *CardType,uchar *SerialInfo,uchar *CID,uchar *Other);
//uchar PiccIsoCommand(uchar cid,APDU_SEND *ApduSend,APDU_RESP *ApduRecv);
//uchar PiccRemove(uchar mode,uchar cid);
//void  PiccClose(void);
//=================================================


#include "posapi.h"


/**************************************************************************
原型：  uchar PiccOpen(int a) 
功能：  对非接触卡模块上电和复位，检查复位后模块初始状态是否正常。 
输入参数：  无   
输出参数：  无   
返回： 
0x00  成功 
其他  异常错误，1 和2 表示超时错误 
注释： 
 POS 开机后，非接触卡模块处于缺省的下电不工作状态。在每
次非接触卡交易前应调用该函数一次。 
  若感应区内有非接触卡，则调用该函数也会使感应区内的卡复
位。 
  若不调用该函数，则调用 PiccClose( )之外的其它非接触卡函数
均会失败。 
 当接触卡模块未安装或出现故障时，调用该函数才会失败。 
**************************************************************************/ 
uchar PiccOpen(void);


/**************************************************************************
原型： 
uchar PiccSetup (uchar mode, PICC_PARA *picc_para) 
功能：写入指定的参数，用以适应较特殊的应用环境；或者读取当前的参数设置 默认为0 ,一般不需要更改
输入参数： 
	mode  用于指定参数设置模式：’r’或‘R’，表示读取；’w’或‘W’，表示写入。 
	picc_para  指向参数设置的结构指针。 默认为NULL
返回结果:  
	0  成功 
	1  参数错误（无效的mode参数） 
	2  模块未开启 
	0xff  非接触卡模块不存在或异常 
	其他值  异常错误，目前暂无其它值。 
**************************************************************************/ 
uchar PiccSetup (uchar mode, PICC_PARA *picc_para);	// mich_temp: protype different



/**************************************************************************
原型： uchar PiccDetect(uchar Mode,uchar *CardType,uchar *SerialInfo,uchar*CID,uchar *Other) 
功能：  按指定的模式搜寻PICC卡片；搜到卡片后，将其选中和激活。 
输入参数： 
	Mode（用于指定卡片搜寻模式） 
		 0  先搜寻A型卡一次，再搜寻B型卡一次；感应区内不允许有多于1张的卡（包括A型卡和B型卡） 。 
		‘a’或‘A’  只搜寻 A 型卡；感应区内不允许有多于 1张的B 型卡 
		‘b’或‘B’  只搜寻 B 型卡；感应区内不允许有多于 1张的B 型卡 
		其它值  保留 
	CardType  ?  指向存取卡片类型字节缓冲区；目前均返回一字节的
		类型值： 
		?  ‘A’ ―搜寻到A 型卡 
		?  ‘B’ ―搜寻到B 型卡 
	Other   时间戳,在(*Other )* 500us时间之内寻卡,如果Other为 Null则寻一次.
		
输出参数： 		
	SerialInfo  指向存取卡片序列号信息的缓冲区首址 
				该信息依次包含了序列号长度和序列号内容等两项内容。 
				B 型卡和M1 卡的序列号均为 4字节； A 型卡的序列号一般为4
				字节，也有7 字节或10字节的。 
				采用字节 SerialInfo[0]指示序列号的长度， SerialInfo[1~9]保存序
				列号(左对齐)。若需要读取序列号、且是 A 型卡，则要使用和
				判断长度字节。 
				若不想输出序列号信息，可置SerialInfo 为NULL；否则应最少
				分配11 字节。 		
			
	CID  指向存取卡片逻辑通道号的缓冲区，该通道号由驱动内部分配
			和指定，取值范围为0~14。 
			按照 ISO14443 的规定，感应区内最多可以有 15 张卡片供轮流
			操作。 
			目前的搜寻模式下，仅允许感应区内存在一张卡，故 CID[0]总
			是返回为 0x00, 且后续对应用传入的有效的 CID 值(0~14)均按
			默认的 0x00处理. 
			若不想输出通道号，可置CID 为NULL。 
 
	Other  指向存取详细错误代码、卡片响应信息等内容的缓冲区 
			Other[0] :  后续字节的长度 
			Other[1-2]：返回详细的错误代码(低字节在前)；卡搜寻的过程
			较为复杂，用此返回值来进行异常错误的准确定位 
			Other[3…]： 
			对于 A 型卡，返回: ATQA[2] + SAK1 + [SAK2] + [SAK3]+ 
			ATS_L en + ATS; 其中, ATQA 2字节, SAK 1 字节, 根据卡片序
			列号的长短,  可能存在 SAK2, SAK3  信息,  均为一个字节. 
			ATS_L en 为 1个字节.  ATS 的长度由ATS_L en 指定. 
			对于B 型卡，返回卡片的ATQB（Answer To Request B）信息，
			其长度为12 字节 
			有关 ATS、ATQB、ATQA 的详细信息请查阅 ISO14443-3、
			ISO14443-4的相关部分。 
			Other[…299]：尾部的内容为保留字节，用于未来扩展；目前全
			输出 0x00 
			若需要输出该信息， Other指向的缓冲区大小至少应为300字节。  
			若不想输出该信息，可置Other为NULL。 

返回： 
	0  成功 
	1  参数错误（无效的mode参数） 
	2  模块未开启 
	3  未搜寻到卡片（感应区内无指定类型的卡片）。 
	4  感应区内卡片过多（出现通讯冲突） 
	6  协议错误（卡片应答中出现违反协议规定的数据） 
	其他值  异常错误, 参考射频卡模块返回码说明部分 
	
搜寻 A 型卡和 B型卡 	
**************************************************************************/ 
uchar PiccDetect(uchar Mode,uchar *CardType,uchar *SerialInfo,uchar *CID,uchar *Other);



/**************************************************************************
原型： uchar PiccIsoCommand(uchar cid,APDU_SEND *ApduSend,APDU_RESP *ApduRecv) 
功能：  在指定的通道上，向卡片发送APDU 格式的数据，并接收响应 输入参数： 
cid  用于指定卡片逻辑通道号；该通道号由PiccDetect( )的 CID参数项输出，其取值范围为 0~14，目前取值均为 0, 且对 1~14的 cid值统一按0处理。 
*ApduSend  指向APDU_SEND 的结构指针。 
输出参数：  *ApduRecv  指向APDU_RESP 的结构指针。 
返回： 
	0  成功 
	1  参数错误（无效的mode参数） 
	2  模块未开启 
	3  对应卡片未激活 
	4  传输错误（重试超限） 
	5  协议错误（卡片应答中出现违反协议规定的数据） 
	其他值  通讯出错, 参考射频卡模块返回码说明部分 
注释： 
  APDU_SEND和APDU_RESP的数据结构与IC卡读写函数接口中定义的相同。 
在PiccDetect( )调用成功后，才可以调用该函数；否则无法成功。 
   ApduSend->Lc应不大于 255，否则会返回参数错误。 
**************************************************************************/ 
uchar PiccIsoCommand(uchar cid,APDU_SEND *ApduSend,APDU_RESP *ApduRecv);



/**************************************************************************
原型：  uchar PiccRemove(uchar mode,uchar cid) 
功能： 
	依据指定的模式，向卡片发送停机指令；或者发送停机指令，还附加判断卡片是否已经移开感应区。 
输入参数： 
	mode（用于指定操作模式） 
	‘h’或‘H’    意为HALT，仅向卡片发送停机指令后就退出；该过程不执行卡移开检测。 
	‘r’或‘R’  意为 REMOVE，执行完整的卡移开流程(符合PayPass的规定)，包括：向卡片发送停机指令、
	再连续 3 次向卡片发送唤醒指令、最后退出；通过执行该完整流程，可确定卡片是否移开感应区。 
	cid  PiccDetect( )调用中返回的卡片逻辑通道号，目前均为0, 且对1~14 的cid值统一按0处理.。 
输出参数：  无   
返回： 
	0  成功（‘R’模式时表示卡已移开；‘H’模式时表示通讯成功） 
	1  参数错误(无效的 mode或cid>14) 
	2  模块未开启 
	3  卡片未唤醒 
	4  传输错误（仅在‘H’模式时返回） 
	5  协议错误（仅在‘H’模式时返回） 
	6  卡片未移开感应区（数据链路畅通无错误，仅在‘R’模式时返回） 
其它值  异常错误, 参考射频卡模块返回码说明部分 

注释： 
	 交易完成后，若对于卡片是否移开感应区无特别要求，可采用’H’ 
	模式调用该函数；若需要确保卡片移开感应区以免重复扣帐，则需
	采用’R’ 模式调用该函数，且当函数返回卡未移开时，应用程序
	须重复调用该函数，或者报告错误后中止交易。 
	 若‘R’模式时返回“卡片未唤醒”错误，原因为未成功调用过
	PiccDetect（）或 PiccIsoCommand（）调用时出现错误导致卡片被
	停机，后一情况下可认为卡已移开。 

**************************************************************************/ 
uchar PiccRemove(uchar mode,uchar cid);



/**************************************************************************
原型：  void PiccClose(void); 
功能：  关闭非接触卡模块，使该模块处于停机状态 
输入参数：  无   
输出参数：  无   
返回：  无   
注释： 
	调用该函数后，非接触卡模块变成关闭状态，模块不再向外面辐射射频
	载波。之后，除PiccOpen( )外的所有其它调用均会失败。 
	建议：交易结束后, 调用该函数关闭射频卡模块,下次交易开始前再调用
PiccOpen()函数重新开启射频卡模块。 
**************************************************************************/ 
void PiccClose(void);




